{"version":3,"sources":["utils.ts","components/Error Boundary/Fallback.tsx","components/Success/Success.tsx","action-creators/index.ts","state/reducers/resistrationReducer.ts","state/reducers/index.ts","store/store.ts","components/Payment Info/PaymentInfo.tsx","components/Address Info/AddressInfo.tsx","components/Personal Info/PersonalInfo.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ActionType","Fallback","errorCode","Success","paymentDataId","className","alertMessage","personalInfo","data","dispatch","type","PERSONAL_INFO","payload","addressInfo","ADDRESS_INFO","paymentInfo","PAYMENT_INFO","initialState","firstName","lastName","streetName","city","accountOwner","ibnNumber","phoneNumber","houseNumber","zipCode","setPersonalInfo","state","setAddressInfo","setPaymentInfo","owner","iban","registrationReducer","action","reducers","combineReducers","registration","store","createStore","applyMiddleware","thunk","PaymentInfo","React","memo","useState","previous","SetPrevious","loading","setLoading","error","setError","paymentId","setPaymentID","useDispatch","bindActionCreators","actionCreators","useSelector","useEffect","localStorage","getItem","getLocalstorageData","String","sendPaymentDetails","paymentDetails","a","Math","floor","random","fetch","method","headers","Accept","body","JSON","stringify","response","status","errorObj","statusText","Error","json","console","log","clear","onSubmit","event","preventDefault","currentTarget","value","length","setItem","setLocalstorageData","alert","htmlFor","name","id","defaultValue","onClick","color","height","width","AddressInfo","next","setNext","setPrevious","Number","addressDetail","addressDetails","placeholder","PersonalInfo","personalDetails","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kTAYYA,E,sECAGC,EATmB,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACnC,OACE,gCACE,uDACA,+CAAkBA,EAAlB,6BCMSC,G,MATsB,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACtC,OACE,sBAAKC,UAAU,UAAf,UACE,wDACA,qBAAIA,UAAU,YAAd,4BAA0CD,W,SFIpCJ,K,6BAAAA,E,2BAAAA,E,4BAAAA,M,KAgDL,IAAMM,EAAe,yBG3CfC,EAAe,SAACC,GAC3B,OAAO,SAACC,GACNA,EAAS,CACPC,KAAMV,EAAWW,cACjBC,QAASJ,MAWFK,EAAc,SAACL,GAC1B,OAAO,SAACC,GACNA,EAAS,CACPC,KAAMV,EAAWc,aACjBF,QAASJ,MAWFO,EAAc,SAACP,GAC1B,OAAO,SAACC,GACNA,EAAS,CACPC,KAAMV,EAAWgB,aACjBJ,QAASJ,M,cCvCTS,EAAyB,CAC7BC,UAAW,GACXC,SAAU,GACVC,WAAY,GACZC,KAAM,GACNC,aAAc,GACdC,UAAW,GACXC,YAAa,KACbC,YAAa,GACbC,QAAS,IAsCLC,EAAkB,SAACC,EAAiBhB,GACxC,IAAMM,EAAYN,EAAQM,UACpBC,EAAWP,EAAQO,SACnBK,EAAcZ,EAAQY,YAC5B,OAAO,2BACFI,GADL,IAEEV,YACAC,WACAK,iBAUEK,EAAiB,SAACD,EAAiBhB,GACvC,IAAMQ,EAAaR,EAAQQ,WACrBK,EAAcb,EAAQa,YACtBC,EAAUd,EAAQc,QAClBL,EAAOT,EAAQS,KACrB,OAAO,2BACFO,GADL,IAEER,aACAK,cACAC,UACAL,UAUES,EAAiB,SAACF,EAAiBhB,GACvC,IAAMU,EAAeV,EAAQmB,MACvBR,EAAYX,EAAQoB,KAC1B,OAAO,2BACFJ,GADL,IAEEN,eACAC,eAIWU,EAtEa,WAGtB,IAFJL,EAEG,uDAFeX,EAClBiB,EACG,uCACH,OAAQA,EAAOxB,MACb,KAAKV,EAAWW,cACd,OAAOgB,EAAgBC,EAAOM,EAAOtB,SACvC,KAAKZ,EAAWc,aACd,OAAOe,EAAeD,EAAOM,EAAOtB,SACtC,KAAKZ,EAAWgB,aACd,OAAOc,EAAeF,EAAOM,EAAOtB,SACtC,QACE,OAAOgB,IC1CEO,EAJEC,YAAgB,CAC/BC,aAAcJ,I,QCDHK,EAAQC,YAAYJ,EAAU,GAAIK,YAAgBC,M,wBC8JhDC,G,MAtJeC,IAAMC,MAAK,WACvC,MAAgCC,oBAAkB,GAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA8BF,oBAAkB,GAAhD,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA0BJ,qBAA1B,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAAkCN,mBAAiB,IAAnD,mBAAOO,EAAP,KAAkBC,EAAlB,KACM5C,EAAW6C,cACTvC,EAAgBwC,YAAmBC,EAAgB/C,GAAnDM,YACFa,EAAQ6B,aAAY,SAAC7B,GAAD,OAAkBA,EAAMS,gBAElDqB,qBAAU,WACJC,aAAaC,QAAQ,gBACvBC,MAGD,IAQH,IAUMA,EAAsB,WAC1B9C,EAAY,CACVgB,MAAO+B,OAAOH,aAAaC,QAAQ,UACnC5B,KAAM8B,OAAOH,aAAaC,QAAQ,YAoChCG,EAAkB,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACzBD,EAAc,WAAiBE,KAAKC,MAAM,GAAAD,KAAKE,SAAuB,GAD7C,kBAIAC,MPxB3B,gEOwBiD,CAC3CC,OAAQ,OACRC,QAAS,CACPC,OAAQ,mBACR,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUX,KAVA,UAYC,OARlBY,EAJiB,QAYVC,OAZU,uBAafC,EAAW,CACfC,WAAYH,EAASG,WACrBF,OAAQD,EAASC,QAEnB5B,GAAW,GACXE,EAASyB,EAASC,QACZ,IAAIG,MAAMN,KAAKC,UAAUG,IAnBV,yBAqBOF,EAASK,OArBhB,QAqBf7E,EArBe,OAsBrB6C,GAAW,GACXI,EAAajD,EAAcA,eAvBN,0DA0BvB8E,QAAQC,IAAR,MA1BuB,QA4BzBxB,aAAayB,QA5BY,0DAAH,sDA+BxB,OACE,iCACItC,IAAaI,IAAUE,GACvB,uBAAM/C,UAAU,OAAOgF,SA3DJ,SAACC,GACxBrC,GAAW,GACXqC,EAAMC,iBAEN,IAAMvB,EAA0B,CAC9BjC,MAAOuD,EAAME,cAAclE,aAAamE,MACxCzD,KAAMsD,EAAME,cAAcjE,UAAUkE,OAGpCH,EAAME,cAAclE,aAAamE,MAAMC,QACvCJ,EAAME,cAAcjE,UAAUkE,MAAMC,QAEpC3E,EAAYiD,GApCY,SAACA,GAC3BL,aAAagC,QAAQ,cAAe,eACpChC,aAAagC,QAAQ,QAAS3B,EAAejC,OAC7C4B,aAAagC,QAAQ,OAAQ3B,EAAehC,MAkC1C4D,CAAoB5B,GACpBD,EAAmBC,IAEnB6B,MAAMvF,IA2CJ,UACE,oBAAID,UAAU,cAAd,mCACA,sBAAKA,UAAU,6BAAf,UACE,sBAAKA,UAAU,cAAf,UACE,uBAAOyF,QAAQ,eAAf,2BACA,uBACEpF,KAAK,OACLqF,KAAK,eACLC,GAAG,eACHC,aAAcrE,EAAK,kBAGvB,sBAAKvB,UAAU,cAAf,UACE,uBAAOyF,QAAQ,YAAf,yBACA,uBACEpF,KAAK,OACLqF,KAAK,YACLC,GAAG,YACHC,aAAcrE,EAAK,eAGvB,sBAAKvB,UAAU,aAAf,UACE,wBACEA,UAAU,eACV6F,QAAS,kBAAMnD,GAAY,IAF7B,sBAMA,wBAAQ1C,UAAU,eAAlB,6BAKPyC,GAAY,cAAC,EAAD,IACZI,GAAS,cAAC,EAAD,CAAUhD,UAAWgD,IAC9BE,IAAcF,GAAS,cAAC,EAAD,CAAS9C,cAAegD,IAChD,qBAAK/C,UAAU,SAAf,SACG2C,GACC,cAAC,IAAD,CAAQtC,KAAK,OAAOyF,MAAM,UAAUC,OAAQ,GAAIC,MAAO,cCTlDC,EAzIe,WAC5B,MAAwBzD,oBAAkB,GAA1C,mBAAO0D,EAAP,KAAaC,EAAb,KACM/F,EAAW6C,cACjB,EAAgCT,oBAAkB,GAAlD,mBAAOC,EAAP,KAAiB2D,EAAjB,KACM7E,EAAQ6B,aAAY,SAAC7B,GAAD,OAAkBA,EAAMS,gBAC1CxB,EAAgB0C,YAAmBC,EAAgB/C,GAAnDI,YAER6C,qBAAU,WACJC,aAAaC,QAAQ,gBACvBC,MAGD,IAQH,IAYMA,EAAsB,WAC1BhD,EAAY,CACVO,WAAY0C,OAAOH,aAAaC,QAAQ,eACxCvC,KAAMyC,OAAOH,aAAaC,QAAQ,SAClCnC,YAAaiF,OAAO/C,aAAaC,QAAQ,gBACzClC,QAASgF,OAAO/C,aAAaC,QAAQ,eAuCzC,OACE,iCACI2C,IAASzD,GACT,uBAAMzC,UAAU,OAAOgF,SAhCJ,SAACC,GAExB,GADAA,EAAMC,iBAEJD,EAAME,cAAcpE,WAAWqE,MAAMC,QACrCJ,EAAME,cAAc/D,YAAYgE,MAAMC,QACtCJ,EAAME,cAAcnE,KAAKoE,MAAMC,QAC/BJ,EAAME,cAAc9D,QAAQ+D,MAC5B,CACA,IAAMkB,EAA6B,CACjCvF,WAAYkE,EAAME,cAAcpE,WAAWqE,MAC3ChE,YAAa6D,EAAME,cAAc/D,YAAYgE,MAC7CpE,KAAMiE,EAAME,cAAcnE,KAAKoE,MAC/B/D,QAAS4D,EAAME,cAAc9D,QAAQ+D,OAGvCe,GAAQ,GACR3F,EAAY8F,GA3CaC,EA4CLD,EA3CtBhD,aAAagC,QAAQ,cAAe,eACpChC,aAAagC,QAAQ,aAAciB,EAAexF,YAClDuC,aAAagC,QAAQ,OAAQiB,EAAevF,MAC5CsC,aAAagC,QAAQ,cAAe7B,OAAO8C,EAAenF,cAC1DkC,aAAagC,QAAQ,UAAW7B,OAAO8C,EAAelF,eAyCpD8E,GAAQ,GACRX,MAAMvF,GA/CkB,IAACsG,GA2DvB,UACE,oBAAIvG,UAAU,cAAd,mCACA,sBAAKA,UAAU,6BAAf,UACE,sBAAKA,UAAU,cAAf,UACE,uBAAOyF,QAAQ,aAAf,yBACA,uBACEpF,KAAK,OACLqF,KAAK,aACLc,YAAY,cACZb,GAAG,aACHC,aAAcrE,EAAK,gBAGvB,sBAAKvB,UAAU,cAAf,UACE,uBAAOyF,QAAQ,cAAf,0BACA,uBACEpF,KAAK,OACLqF,KAAK,cACLc,YAAY,eACZb,GAAG,cACHC,aAAcrE,EAAK,iBAGvB,sBAAKvB,UAAU,cAAf,UACE,uBAAOyF,QAAQ,UAAf,sBACA,uBACEpF,KAAK,OACLqF,KAAK,UACLC,GAAG,UACHa,YAAY,WACZZ,aAAcrE,EAAK,aAGvB,sBAAKvB,UAAU,cAAf,UACE,uBAAOyF,QAAQ,OAAf,kBACA,uBACEpF,KAAK,OACLqF,KAAK,OACLC,GAAG,OACHa,YAAY,OACZZ,aAAcrE,EAAK,UAGvB,sBAAKvB,UAAU,aAAf,UACE,wBAAQA,UAAU,eAAe6F,QApDtB,WACrBO,GAAY,GACZD,GAAQ,IAkDE,sBAGA,wBAAQnG,UAAU,eAAlB,2BAKPkG,IAASzD,GAAY,cAAC,EAAD,IACrBA,GAAY,cAAC,EAAD,QCvBJgE,EA9GgB,WAC7B,MAAwBjE,oBAAkB,GAA1C,mBAAO0D,EAAP,KAAaC,EAAb,KACM/F,EAAW6C,cACT/C,EAAiBgD,YAAmBC,EAAgB/C,GAApDF,aACFqB,EAAQ6B,aAAY,SAAC7B,GAAD,OAAkBA,EAAMS,gBAElDqB,qBAAU,WACRG,MAEC,IAQH,IA2BM+B,EAAsB,SAACmB,GAC3BpD,aAAagC,QAAQ,eAAgB,gBACrChC,aAAagC,QAAQ,YAAaoB,EAAgB7F,WAClDyC,aAAagC,QAAQ,WAAYoB,EAAgB5F,UACjDwC,aAAagC,QAAQ,cAAe7B,OAAOiD,EAAgBvF,eAOvDqC,EAAsB,WACtBF,aAAaC,QAAQ,iBACvBrD,EAAa,CACXW,UAAW4C,OAAOH,aAAaC,QAAQ,cACvCzC,SAAU2C,OAAOH,aAAaC,QAAQ,aACtCpC,YAAakF,OAAO/C,aAAaC,QAAQ,mBAK/C,OACE,iCACI2C,GACA,uBAAMlG,UAAU,OAAOgF,SAnDJ,SAACC,GAExB,GADAA,EAAMC,iBAEJD,EAAME,cAActE,UAAUuE,MAAMC,QACpCJ,EAAME,cAAcrE,SAASsE,MAAMC,QACnCJ,EAAME,cAAchE,YAAYiE,MAAMC,OACtC,CACAc,GAAQ,GACR,IAAMO,EAAgC,CACpC7F,UAAWoE,EAAME,cAActE,UAAUuE,MACzCtE,SAAUmE,EAAME,cAAcrE,SAASsE,MACvCjE,YAAa8D,EAAME,cAAchE,YAAYiE,OAE/ClF,EAAawG,GACbnB,EAAoBmB,QAEpBP,GAAQ,GACRX,MAAMvF,IAkCJ,UACE,oBAAID,UAAU,cAAd,oCACA,sBAAKA,UAAU,cAAf,UACE,uBAAOyF,QAAQ,YAAf,wBACA,uBACEpF,KAAK,OACLqF,KAAK,YACLc,YAAY,aACZZ,aAAcrE,EAAK,eAGvB,sBAAKvB,UAAU,cAAf,UACE,uBAAOyF,QAAQ,WAAf,uBACA,uBACEpF,KAAK,OACLqF,KAAK,WACLC,GAAG,WACHa,YAAY,YACZZ,aAAcrE,EAAK,cAGvB,sBAAKvB,UAAU,cAAf,UACE,uBAAOyF,QAAQ,cAAf,oBACA,uBACEpF,KAAK,OACLqF,KAAK,cACLC,GAAG,cACHa,YAAY,eACZZ,aAAcrE,EAAK,iBAGvB,8BACE,wBAAQvB,UAAU,8BAAlB,uBAKLkG,GAAQ,cAAC,EAAD,QCpGAS,MARf,WACE,OACE,qBAAK3G,UAAU,MAAf,SACE,cAAC,EAAD,OCOS4G,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUtF,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJuF,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7edf7102.chunk.js","sourcesContent":["export interface Customer {\n  firstName: string;\n  lastName: string;\n  streetName: string;\n  city: string;\n  accountOwner: string;\n  ibnNumber: string;\n  phoneNumber: number | null;\n  houseNumber: string;\n  zipCode: string;\n}\n\nexport enum ActionType {\n  PERSONAL_INFO = 'personalInfo',\n  ADDRESS_INFO = 'addressInfo',\n  PAYMENT_INFO = 'paymentInfo',\n}\n\nexport interface PersonalData {\n  firstName: string;\n  lastName: string;\n  phoneNumber: number;\n}\n\nexport interface AddressData {\n  streetName: string;\n  city: string;\n  houseNumber: number;\n  zipCode: number;\n}\n\nexport interface Payment {\n  owner: string;\n  iban: string;\n  customerId?: number;\n}\n\nexport interface PersonalInfoAction {\n  type: string;\n  payload: PersonalData;\n}\n\nexport interface AddressInfoAction {\n  type: string;\n  payload: AddressData;\n}\n\nexport interface PaymentInfoAction {\n  type: string;\n  payload: Payment;\n}\n\nexport interface PaymentId {\n  paymentDataId: string;\n}\n\nexport interface Error {\n  errorCode: number;\n}\n\nexport const alertMessage = 'Input field cant blank';\nexport const demoPaymentApi =\n  '/default/wunderfleet-recruiting-backend-dev-save-payment-data';\n","import React from 'react';\nimport { Error } from '../../utils';\n\nconst Fallback: React.FC<Error> = ({ errorCode }) => {\n  return (\n    <div>\n      <h3> Something went wrong</h3>\n      <h4> Error Code: {errorCode}, Please try again </h4>\n    </div>\n  );\n};\n\nexport default Fallback;\n","import React from 'react';\nimport { PaymentId } from '../../utils';\nimport '../../App.scss';\n\nconst Success: React.FC<PaymentId> = ({ paymentDataId }) => {\n  return (\n    <div className='success'>\n      <h2> Data successful saved</h2>\n      <h3 className='paymentId'>paymentDataId: {paymentDataId}</h3>\n    </div>\n  );\n};\n\nexport default Success;\n","import {\n  ActionType,\n  PersonalData,\n  Payment,\n  AddressData,\n  PaymentInfoAction,\n  PersonalInfoAction,\n  AddressInfoAction,\n} from '../utils';\nimport { Dispatch } from 'redux';\n\n/**\n * Action creator function for PersonalData\n * method call reducer function and send payload to it.\n * @param data {payload}\n */\n\nexport const personalInfo = (data: PersonalData) => {\n  return (dispatch: Dispatch<PersonalInfoAction>) => {\n    dispatch({\n      type: ActionType.PERSONAL_INFO,\n      payload: data,\n    });\n  };\n};\n\n/**\n * Action creator function for AddressData\n * method call reducer function and send payload to it.\n * @param data {payload}\n */\n\nexport const addressInfo = (data: AddressData) => {\n  return (dispatch: Dispatch<AddressInfoAction>) => {\n    dispatch({\n      type: ActionType.ADDRESS_INFO,\n      payload: data,\n    });\n  };\n};\n\n/**\n * Action creator function for Payment\n * method call reducer function and send payload to it.\n * @param data {payload}\n */\n\nexport const paymentInfo = (data: Payment) => {\n  return (dispatch: Dispatch<PaymentInfoAction>) => {\n    dispatch({\n      type: ActionType.PAYMENT_INFO,\n      payload: data,\n    });\n  };\n};\n","import {\n  Customer,\n  ActionType,\n  PersonalInfoAction,\n  AddressInfoAction,\n  PaymentInfoAction,\n  PersonalData,\n  AddressData,\n  Payment,\n} from '../../utils';\n\n// Define the initial state using that type\nconst initialState: Customer = {\n  firstName: '',\n  lastName: '',\n  streetName: '',\n  city: '',\n  accountOwner: '',\n  ibnNumber: '',\n  phoneNumber: null,\n  houseNumber: '',\n  zipCode: '',\n};\n\n/**\n *  type of action\n */\n\ntype Action = PersonalInfoAction | PaymentInfoAction | AddressInfoAction;\n\n/**\n * Reducer function whihch take action and state\n * return state\n * @param state\n * @param action\n */\n\nconst registrationReducer = (\n  state: Customer = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionType.PERSONAL_INFO:\n      return setPersonalInfo(state, action.payload as PersonalData);\n    case ActionType.ADDRESS_INFO:\n      return setAddressInfo(state, action.payload as AddressData);\n    case ActionType.PAYMENT_INFO:\n      return setPaymentInfo(state, action.payload as Payment);\n    default:\n      return state;\n  }\n};\n\n/**\n * Method set and return state for PersonalData\n * @param state\n * @param payload\n */\n\nconst setPersonalInfo = (state: Customer, payload: PersonalData) => {\n  const firstName = payload.firstName;\n  const lastName = payload.lastName;\n  const phoneNumber = payload.phoneNumber;\n  return {\n    ...state,\n    firstName,\n    lastName,\n    phoneNumber,\n  };\n};\n\n/**\n * Method set and return state for AddressData\n * @param state\n * @param payload\n */\n\nconst setAddressInfo = (state: Customer, payload: AddressData) => {\n  const streetName = payload.streetName;\n  const houseNumber = payload.houseNumber;\n  const zipCode = payload.zipCode;\n  const city = payload.city;\n  return {\n    ...state,\n    streetName,\n    houseNumber,\n    zipCode,\n    city,\n  };\n};\n\n/**\n * Method set and return state for Payment\n * @param state\n * @param payload\n */\n\nconst setPaymentInfo = (state: Customer, payload: Payment) => {\n  const accountOwner = payload.owner;\n  const ibnNumber = payload.iban;\n  return {\n    ...state,\n    accountOwner,\n    ibnNumber,\n  };\n};\n\nexport default registrationReducer;\n","import { combineReducers } from 'redux';\nimport registrationReducer from '../reducers/resistrationReducer';\n\nconst reducers = combineReducers({\n  registration: registrationReducer,\n});\n\nexport default reducers;\n\nexport type State = ReturnType<typeof reducers>;\n","import { createStore, applyMiddleware } from 'redux';\nimport reducers from '../state/reducers/index';\nimport thunk from 'redux-thunk';\nexport const store = createStore(reducers, {}, applyMiddleware(thunk));\n","import React, { useState, useEffect } from 'react';\nimport AddressInfo from '../Address Info/AddressInfo';\nimport Fallback from '../Error Boundary/Fallback';\nimport Success from '../Success/Success';\nimport { actionCreators, State } from '../../state';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { alertMessage, Payment, demoPaymentApi } from '../../utils';\nimport Loader from 'react-loader-spinner';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\n\nconst PaymentInfo: React.FC = React.memo(() => {\n  const [previous, SetPrevious] = useState<boolean>(false);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<number>();\n  const [paymentId, setPaymentID] = useState<string>('');\n  const dispatch = useDispatch();\n  const { paymentInfo } = bindActionCreators(actionCreators, dispatch);\n  const state = useSelector((state: State) => state.registration);\n\n  useEffect(() => {\n    if (localStorage.getItem('paymentInfo')) {\n      getLocalstorageData();\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  /**\n   *  Method set data to localstoarage\n   *\n   * @param paymentDetails\n   */\n\n  const setLocalstorageData = (paymentDetails: Payment): void => {\n    localStorage.setItem('paymentInfo', 'paymentInfo');\n    localStorage.setItem('owner', paymentDetails.owner);\n    localStorage.setItem('iban', paymentDetails.iban);\n  };\n\n  /**\n   *  Method getData from local storage and pass to reducer method to set state\n   */\n\n  const getLocalstorageData = (): void => {\n    paymentInfo({\n      owner: String(localStorage.getItem('owner')),\n      iban: String(localStorage.getItem('iban')),\n    });\n  };\n\n  /**\n   * Method is submit form data to state and call local stoarage method.\n   * Check value should not be null.\n   * Call sendPaymentDetails method for post data.\n   * @param event\n   */\n\n  const handleFormSubmit = (event: React.FormEvent<HTMLFormElement>): void => {\n    setLoading(true);\n    event.preventDefault();\n\n    const paymentDetails: Payment = {\n      owner: event.currentTarget.accountOwner.value,\n      iban: event.currentTarget.ibnNumber.value,\n    };\n    if (\n      event.currentTarget.accountOwner.value.length &&\n      event.currentTarget.ibnNumber.value.length\n    ) {\n      paymentInfo(paymentDetails);\n      setLocalstorageData(paymentDetails);\n      sendPaymentDetails(paymentDetails);\n    } else {\n      alert(alertMessage);\n    }\n  };\n\n  /**\n   * Method used post data to api and set paymentId\n   * @param paymentDetails\n   */\n\n  const sendPaymentDetails = async (paymentDetails: Payment) => {\n    paymentDetails['customerId'] = Math.floor(Math.random() * (100 - 1) + 1);\n\n    try {\n      const response = await fetch(demoPaymentApi, {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(paymentDetails),\n      });\n      if (response.status !== 200) {\n        const errorObj = {\n          statusText: response.statusText,\n          status: response.status,\n        };\n        setLoading(false);\n        setError(response.status);\n        throw new Error(JSON.stringify(errorObj));\n      } else {\n        const paymentDataId = await response.json();\n        setLoading(false);\n        setPaymentID(paymentDataId.paymentDataId);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n    localStorage.clear();\n  };\n\n  return (\n    <div>\n      {!previous && !error && !paymentId && (\n        <form className='form' onSubmit={handleFormSubmit}>\n          <h3 className='text-center'> Payment Information </h3>\n          <div className='form-step form-step-active'>\n            <div className='input-group'>\n              <label htmlFor='accountOwner'>Account Owner</label>\n              <input\n                type='text'\n                name='accountOwner'\n                id='accountOwner'\n                defaultValue={state['accountOwner']}\n              />\n            </div>\n            <div className='input-group'>\n              <label htmlFor='ibnNumber'>IBAN Number</label>\n              <input\n                type='text'\n                name='ibnNumber'\n                id='ibnNumber'\n                defaultValue={state['ibnNumber']}\n              />\n            </div>\n            <div className='btns-group'>\n              <button\n                className='btn btn-prev'\n                onClick={() => SetPrevious(true)}\n              >\n                Previous\n              </button>\n              <button className='btn btn-next'>Submit</button>\n            </div>\n          </div>\n        </form>\n      )}\n      {previous && <AddressInfo />}\n      {error && <Fallback errorCode={error} />}\n      {paymentId && !error && <Success paymentDataId={paymentId} />}\n      <div className='loader'>\n        {loading && (\n          <Loader type='Oval' color='#00BFFF' height={50} width={50} />\n        )}\n      </div>\n    </div>\n  );\n});\n\nexport default PaymentInfo;\n","import React, { useState, useEffect } from 'react';\nimport PersonalInfo from '../Personal Info/PersonalInfo';\nimport PaymentInfo from '../Payment Info/PaymentInfo';\nimport { actionCreators, State } from '../../state';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { alertMessage, AddressData } from '../../utils';\n\nconst AddressInfo: React.FC = () => {\n  const [next, setNext] = useState<Boolean>(false);\n  const dispatch = useDispatch();\n  const [previous, setPrevious] = useState<boolean>(false);\n  const state = useSelector((state: State) => state.registration);\n  const { addressInfo } = bindActionCreators(actionCreators, dispatch);\n\n  useEffect(() => {\n    if (localStorage.getItem('addressInfo')) {\n      getLocalstorageData();\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  /**\n   *  Method set data to localstoarage\n   *\n   * @param addressDetails {AddressData}\n   */\n\n  const setLocalstorageData = (addressDetails: AddressData): void => {\n    localStorage.setItem('addressInfo', 'addressInfo');\n    localStorage.setItem('streetName', addressDetails.streetName);\n    localStorage.setItem('city', addressDetails.city);\n    localStorage.setItem('houseNumber', String(addressDetails.houseNumber));\n    localStorage.setItem('zipCode', String(addressDetails.zipCode));\n  };\n\n  /**\n   *  Method getData from local storage and pass to reducer method to set state\n   */\n\n  const getLocalstorageData = (): void => {\n    addressInfo({\n      streetName: String(localStorage.getItem('streetName')),\n      city: String(localStorage.getItem('city')),\n      houseNumber: Number(localStorage.getItem('houseNumber')),\n      zipCode: Number(localStorage.getItem('zipCode')),\n    });\n  };\n\n  /**\n   * Method is submit form data to state and call local stoarage method.\n   * Check value should not be null\n   * @param event\n   */\n\n  const handleFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (\n      event.currentTarget.streetName.value.length &&\n      event.currentTarget.houseNumber.value.length &&\n      event.currentTarget.city.value.length &&\n      event.currentTarget.zipCode.value\n    ) {\n      const addressDetail: AddressData = {\n        streetName: event.currentTarget.streetName.value,\n        houseNumber: event.currentTarget.houseNumber.value,\n        city: event.currentTarget.city.value,\n        zipCode: event.currentTarget.zipCode.value,\n      };\n\n      setNext(true);\n      addressInfo(addressDetail);\n      setLocalstorageData(addressDetail);\n    } else {\n      setNext(false);\n      alert(alertMessage);\n    }\n  };\n\n  const handlePrevious = (): void => {\n    setPrevious(true);\n    setNext(false);\n  };\n\n  return (\n    <div>\n      {!next && !previous && (\n        <form className='form' onSubmit={handleFormSubmit}>\n          <h3 className='text-center'> Address Information </h3>\n          <div className='form-step form-step-active'>\n            <div className='input-group'>\n              <label htmlFor='streetName'>Street Name</label>\n              <input\n                type='text'\n                name='streetName'\n                placeholder='Street Name'\n                id='streetName'\n                defaultValue={state['streetName']}\n              />\n            </div>\n            <div className='input-group'>\n              <label htmlFor='houseNumber'>House Number</label>\n              <input\n                type='text'\n                name='houseNumber'\n                placeholder='House Number'\n                id='houseNumber'\n                defaultValue={state['houseNumber']}\n              />\n            </div>\n            <div className='input-group'>\n              <label htmlFor='zipCode'>Zip Code</label>\n              <input\n                type='text'\n                name='zipCode'\n                id='zipCode'\n                placeholder='Zip Code'\n                defaultValue={state['zipCode']}\n              />\n            </div>\n            <div className='input-group'>\n              <label htmlFor='city'>City</label>\n              <input\n                type='text'\n                name='city'\n                id='city'\n                placeholder='City'\n                defaultValue={state['city']}\n              />\n            </div>\n            <div className='btns-group'>\n              <button className='btn btn-prev' onClick={handlePrevious}>\n                Previous\n              </button>\n              <button className='btn btn-next'>Next</button>\n            </div>\n          </div>\n        </form>\n      )}\n      {next && !previous && <PaymentInfo />}\n      {previous && <PersonalInfo />}\n    </div>\n  );\n};\n\nexport default AddressInfo;\n","import React, { useState, useEffect } from 'react';\nimport AddressInfo from '../Address Info/AddressInfo';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { actionCreators, State } from '../../state';\nimport { alertMessage, PersonalData } from '../../utils';\n\nconst PersonalInfo: React.FC = () => {\n  const [next, setNext] = useState<Boolean>(false);\n  const dispatch = useDispatch();\n  const { personalInfo } = bindActionCreators(actionCreators, dispatch);\n  const state = useSelector((state: State) => state.registration);\n\n  useEffect(() => {\n    getLocalstorageData();\n    // eslint-disable-next-line\n  }, []);\n\n  /**\n   * Method is submit form data to state and call local stoarage method.\n   * Check value should not be null\n   * @param event\n   */\n\n  const handleFormSubmit = (event: React.FormEvent<HTMLFormElement>): void => {\n    event.preventDefault();\n    if (\n      event.currentTarget.firstName.value.length &&\n      event.currentTarget.lastName.value.length &&\n      event.currentTarget.phoneNumber.value.length\n    ) {\n      setNext(true);\n      const personalDetails: PersonalData = {\n        firstName: event.currentTarget.firstName.value,\n        lastName: event.currentTarget.lastName.value,\n        phoneNumber: event.currentTarget.phoneNumber.value,\n      };\n      personalInfo(personalDetails);\n      setLocalstorageData(personalDetails);\n    } else {\n      setNext(false);\n      alert(alertMessage);\n    }\n  };\n\n  /**\n   *  Method set data to localstoarage\n   *\n   * @param personalDetails\n   */\n\n  const setLocalstorageData = (personalDetails: PersonalData): void => {\n    localStorage.setItem('personalInfo', 'personalInfo');\n    localStorage.setItem('firstName', personalDetails.firstName);\n    localStorage.setItem('lastName', personalDetails.lastName);\n    localStorage.setItem('phoneNumber', String(personalDetails.phoneNumber));\n  };\n\n  /**\n   *  Method getData from local storage and pass to reducer method to set state\n   */\n\n  const getLocalstorageData = (): void => {\n    if (localStorage.getItem('personalInfo')) {\n      personalInfo({\n        firstName: String(localStorage.getItem('firstName')),\n        lastName: String(localStorage.getItem('lastName')),\n        phoneNumber: Number(localStorage.getItem('phoneNumber')),\n      });\n    }\n  };\n\n  return (\n    <div>\n      {!next && (\n        <form className='form' onSubmit={handleFormSubmit}>\n          <h3 className='text-center'> Personal Information </h3>\n          <div className='input-group'>\n            <label htmlFor='firstName'>First Name</label>\n            <input\n              type='text'\n              name='firstName'\n              placeholder='First Name'\n              defaultValue={state['firstName']}\n            />\n          </div>\n          <div className='input-group'>\n            <label htmlFor='lastName'>Last Name</label>\n            <input\n              type='text'\n              name='lastName'\n              id='lastName'\n              placeholder='Last Name'\n              defaultValue={state['lastName']}\n            />\n          </div>\n          <div className='input-group'>\n            <label htmlFor='phoneNumber'>Number</label>\n            <input\n              type='text'\n              name='phoneNumber'\n              id='phoneNumber'\n              placeholder='Phone Number'\n              defaultValue={state['phoneNumber']}\n            />\n          </div>\n          <div>\n            <button className='btn btn-next btn-next-width'>Next</button>\n          </div>\n        </form>\n      )}\n\n      {next && <AddressInfo />}\n    </div>\n  );\n};\n\nexport default PersonalInfo;\n","import React from 'react';\nimport PersonalInfo from './components/Personal Info/PersonalInfo';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <PersonalInfo />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}